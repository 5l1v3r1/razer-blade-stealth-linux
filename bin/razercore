#!/bin/bash
#
# Razer Core thunderbolt (de-)connect script
# No warranty, no license, just for fun
#
# Needs Bumblebee, tested with NVIDIA GFX card, Ubuntu 17.10
# Setup & details:
# https://github.com/rolandguelle/razer-blade-stealth-linux
#

typeset -i RETRYDRIVER
RETRYDRIVER=0
GLXTEST=""
command="$1"
shift
cmdline="$@"

hash tbtadm 2>/dev/null || { echo >&2 "Require tbtadm but it's not installed. Aborting."; exit 1; }

function usageText() {
	echo "Usage: razercore status|intern <prog>|extern <prog>"
	echo ""
	echo "More: https://github.com/rolandguelle/razer-blade-stealth-linux#razercore"
	echo ""
}

function restartBumblebeed() {
	echo "Restart bumblebeed"
	sudo cp /etc/bumblebee/bumblebee-internal.conf /etc/bumblebee/bumblebee.conf
	sudo systemctl restart bumblebeed.service
	sleep 1
}

# Authorize thunderbold device and check if NVIDIA GL Extension is available
function coreAuthorize() {
	if [[ $RETRYDRIVER > 5 ]]
	then
		echo "Too many retries, giving up!"
		echo "Check thunderbolt cable or installaton."
		exit 1
	fi

	coreStatus

	if [[ $GLXTEST == '' ]]
	then
		RETRYDRIVER+=1
		sleep 1
		echo "Retry $RETRYDRIVER in 1 second..."
		coreAuthorize
	fi
}

function coreStatus() {
	# check if Razer Core is connected via thunderbolt
	CORETEST=$(tbtadm devices 2> /dev/null | grep "Razer	Core")
	if [[ $CORETEST == '' ]]
	then
		echo "Core not found!"
	else
		echo "Core Found!"
		echo "${CORETEST}"
		GLXTEST=$(optirun glxinfo 2> /dev/null | grep OpenGL | grep string)
		if [[ $GLXTEST == '' ]]
		then
			echo "OpenGL driver not correct loaded."
		else
			echo "OpenGL Driver loaded!"
			echo "${GLXTEST}"
		fi
	fi
}


# run program / render on eGPU at Razer Core  / display at external screen / connected on GPU / Razer Core
function runExternal {
    coreAuthorize
	echo "Use bumblebee-external.conf"
    sudo cp /etc/bumblebee/bumblebee-external.conf /etc/bumblebee/bumblebee.conf
	echo "Restart modified bumblebeed"
	sudo systemctl restart bumblebeed.service
	sleep 1
	# needed for steam
	sudo prime-select nvidia
	# start external X server
	optirun true
	# set x env to external display
	export DISPLAY=:8 LD_LIBRARY_PATH=/usr/lib/nvidia-387:$LD_LIBRARY_PATH
	# set configuration back, for later bumblebee restart
    sudo cp /etc/bumblebee/bumblebee-internal.conf /etc/bumblebee/bumblebee.conf
	internalOff
	# EXEC cmd
	(exec "$cmdline")
	# EXIT cmd
	echo "Cleanup External Setup"
	internalOn
	# switch back to intel as primary display
	sudo prime-select intel
	# restart bumblebee
	restartBumblebeed
	echo "Exit razercore run-ext"
}

# run program / render on eGPU at Razer Core  / display at internal Laptop or HDMI on Laptop
function runInternal {
	coreAuthorize
	# EXEC cmd
	(PRIMUS_SYNC=1 vblank_mode=0 primusrun "$cmdline")
	# EXIT cmd
	echo "Exit razercore run-int"
}

# set everything back to _normal_ mode
function resetSettings {
    sudo cp /etc/bumblebee/bumblebee-internal.conf /etc/bumblebee/bumblebee.conf
	internalOn
	sudo prime-select intel
	restartBumblebeed
}

function internalOn {
	# enabld touchscreen
	echo "Enable touchpad on Wayland / Gnome"
	gsettings set org.gnome.desktop.peripherals.touchpad send-events enabled
}

function internalOff {
	# disable touchscreen
	echo "Disabled touchpad on Wayland / Gnome! Manual reenable it: razercore reset or razercore intern-on"
	gsettings set org.gnome.desktop.peripherals.touchpad send-events disabled	
}

### main
if [[ $command == "extern" || $command == "run-ext" || $command == "exec-ext" ]]
then
	runExternal
elif [[ $command == "intern" || $command == "run-int" || $command == "exec" ]]
then
	runInternal
elif [[ $command == "status" ]]
then
	coreAuthorize
elif [[ $command == "reset" ]]
then
	resetSettings
elif [[ $command == "intern-on" ]]
then
	internalOn
elif [[ $command == "intern-off" ]]
then
	internalOff
else
	usageText
fi