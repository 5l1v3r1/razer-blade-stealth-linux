#!/bin/bash
# Razer Core thunderbolt (de-)connect script
# No warranty, no license, just for fun
#
# Needs Bumblebee, tested with NVIDIA GFX card
# Setup & details:
# https://github.com/rolandguelle/razer-blade-stealth-linux
#

typeset -i RETRYDRIVER
RETRYDRIVER=0
GLXTEST=""
command="$1"
shift
cmdline="$@"

function usageText() {
	echo "Short: razercore start|stop|restart|status|run-int <prog>|run-ext <prog>"
HELPTEXT="Full:
- razercore start
    - PCI rescan, authorize thunderbolt
    - Check status (aka razercore status)
- razercore status
    - Status of connection
- razercore stop
    - Remove PCI device
- razercore restart
    - Stop & start
- razercore run-int "prog"
    - razercore "start", run prog on external GPU & render at internal or laptop HDMI connected screen, razercore "stop"
    - Example: razercore run-int steam
- razercore run-ext "prog"
    - razercore "start", run prog on external GPU & render at Razer Core connected screen, razercore "stop"
    - Example: razercore run-ext steam"
	echo "$HELPTEXT"
	echo ""
	echo "More: https://github.com/rolandguelle/razer-blade-stealth-linux#razercore"
	echo ""
}

# check if Razer Core is connected via thunderbolt
function checkRazerCore() {
	if [[ ! -e /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name ]]
	then
		echo "No thunderbold device found. Rescan PCI bus."
		echo "1" | sudo tee /sys/bus/pci/rescan > /dev/null
		sleep 1
	fi

	if [[ -e /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name && "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name)" == 'Razer' && "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/device_name)" == 'Core' ]]
	then
		return
	else
		echo "Razer Core not found"
		exit 1
	fi	
}

function restartBumblebeed() {
	echo "Restart bumblebeed"
	sudo systemctl restart bumblebeed.service
	sleep 1
}

# Authorize thunderbold device and check if NVIDIA GL Extension is available
function coreAuthorize() {
	if [[ $RETRYDRIVER > 3 ]]
	then
		echo "Too many retries, giving up!"
		echo "OpenGL driver not correct loaded!"
		echo "Check thunderbolt cable or installaton."
		exit 1
	fi

	checkRazerCore

	if [[ "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/authorized)" == '0' ]]
	then
		echo "Authorize Razer Core..."
		echo "1" | sudo tee /sys/bus/thunderbolt/devices/0-0/0-1/authorized > /dev/null
	else
		echo "Razer Core already authorized."
	fi

	coreStatus

	if [[ $GLXTEST == '' ]]
	then
		RETRYDRIVER+=1
		echo "Retry $RETRYDRIVER : reloading bumblebee and re-run..."
		restartBumblebeed
		coreAuthorize
	fi
}

function coreStatus() {
	if [[ -e /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name ]]
	then
		if [[ "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name)" == 'Razer' && "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/device_name)" == 'Core' ]]
		then
			echo "Razer Core connected: id=$(cat /sys/bus/thunderbolt/devices/0-0/0-1/unique_id)"
			echo "Authorized: $(cat /sys/bus/thunderbolt/devices/0-0/0-1/authorized)"
			if [[ "$(cat /sys/bus/thunderbolt/devices/0-0/0-1/authorized)" == '1' ]]
			then
				GLXTEST=$(optirun glxinfo 2> /dev/null | grep OpenGL | grep string)
				if [[ $GLXTEST == '' ]]
				then
					echo "OpenGL driver not correct loaded!"
				else
					echo "OpenGL Driver loaded!"
					echo "${GLXTEST}"
				fi
			fi
		else
			echo "Razer Core not found, but other thunderbolt device:"
			echo "Vendor: $(cat /sys/bus/thunderbolt/devices/0-0/0-1/vendor_name)"
			echo "Device: $(cat /sys/bus/thunderbolt/devices/0-0/0-1/device_name)"
		fi
	else
		echo "Razer Core not connected or stopped."	
	fi
}

# remove razer core device
function removeRazerCore {
	if [[ -e /sys/bus/pci/devices/0000\:04\:00.0/remove ]]
	then
		echo "Remove Racer Core PCI Devices..."
		echo "1" | sudo tee /sys/bus/pci/devices/0000\:04\:00.0/remove > /dev/null
	else
		echo "Racer Core PCI Devices seems to be gone..."
	fi
}

# run program / render on eGPU at Razer Core  / display at external screen / connected on GPU / Razer Core
function runExternal {
    coreAuthorize
	echo "Backup existing configuration"
    sudo mv /etc/bumblebee/bumblebee.conf /etc/bumblebee/bumblebee.conf.bak
	echo "Use bumblebee-external.conf"
    sudo cp /etc/bumblebee/bumblebee-external.conf /etc/bumblebee/bumblebee.conf
	echo "Restart modified bumblebeed"
	sudo systemctl restart bumblebeed.service
	sleep 1
	# needed for steam
	sudo prime-select nvidia
	# start external X server
	optirun true
	# set x env to external display
	export DISPLAY=:8 LD_LIBRARY_PATH=/usr/lib/nvidia-387:$LD_LIBRARY_PATH
	# set configuration back, for later bumblebee restart
    sudo mv /etc/bumblebee/bumblebee.conf.bak /etc/bumblebee/bumblebee.conf
	# EXEC cmd
	("$cmdline")
#	(exec "$cmdline")
	# EXIT cmd
	echo "Cleanup External Setup"
	# switch back to intel as primary display
	sudo prime-select intel
	# restart bumblebee
	restartBumblebeed
	removeRazerCore
	echo "Exit razercore run-ext"
}

# run program / render on eGPU at Razer Core  / display at internal Laptop or HDMI on Laptop
function runInternal {
	coreAuthorize
	# EXEC cmd
	(PRIMUS_SYNC=1 vblank_mode=0 primusrun "$cmdline")
	# EXIT cmd
	removeRazerCore
	echo "Exit razercore run-int"
}

function stopRazerCore {
	checkRazerCore
	removeRazerCore
}

### main

if [[ $command == "run-ext" || $command == "exec-ext" ]]
then
	runExternal
elif [[ $command == "run-int" || $command == "exec" ]]
then
	runInternal
elif [[ $command == "start" ]]
then
	coreAuthorize
elif [[ $command == "stop" ]]
then
	stopRazerCore
elif [[ $command == "restart" ]]
then
	removeRazerCore
	coreAuthorize
elif [[ $command == "status" ]]
then
	coreStatus
else
	usageText
fi